{
  "version": 3,
  "sources": ["../../@vaadin/multi-select-combo-box/theme/lumo/vaadin-multi-select-combo-box.js", "../../@vaadin/multi-select-combo-box/theme/lumo/vaadin-multi-select-combo-box-chip-styles.js", "../../@vaadin/multi-select-combo-box/theme/lumo/vaadin-multi-select-combo-box-styles.js", "../../@vaadin/multi-select-combo-box/src/vaadin-multi-select-combo-box-chip.js", "../../@vaadin/multi-select-combo-box/src/vaadin-multi-select-combo-box-container.js", "../../@vaadin/multi-select-combo-box/src/vaadin-multi-select-combo-box-item.js", "../../@vaadin/multi-select-combo-box/src/vaadin-multi-select-combo-box-overlay.js", "../../@vaadin/multi-select-combo-box/src/vaadin-multi-select-combo-box-scroller.js", "../../@vaadin/multi-select-combo-box/src/vaadin-multi-select-combo-box-internal.js", "../../@vaadin/multi-select-combo-box/src/vaadin-multi-select-combo-box.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport '@vaadin/combo-box/theme/lumo/vaadin-combo-box-item-styles.js';\r\nimport '@vaadin/combo-box/theme/lumo/vaadin-combo-box-dropdown-styles.js';\r\nimport '@vaadin/input-container/theme/lumo/vaadin-input-container.js';\r\nimport './vaadin-multi-select-combo-box-chip-styles.js';\r\nimport './vaadin-multi-select-combo-box-styles.js';\r\nimport '../../src/vaadin-multi-select-combo-box.js';\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport '@vaadin/vaadin-lumo-styles/color.js';\r\nimport '@vaadin/vaadin-lumo-styles/font-icons.js';\r\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\r\nimport '@vaadin/vaadin-lumo-styles/style.js';\r\nimport '@vaadin/vaadin-lumo-styles/typography.js';\r\nimport { fieldButton } from '@vaadin/vaadin-lumo-styles/mixins/field-button.js';\r\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\nconst chip = css`\r\n  :host {\r\n    font-size: var(--lumo-font-size-xxs);\r\n    line-height: 1;\r\n    padding: 0.3125em calc(0.5em + var(--lumo-border-radius-s) / 4);\r\n    color: var(--lumo-body-text-color);\r\n    border-radius: var(--lumo-border-radius-s);\r\n    background-color: var(--lumo-contrast-20pct);\r\n    cursor: var(--lumo-clickable-cursor);\r\n  }\r\n\r\n  :host([focused]) {\r\n    background-color: var(--lumo-primary-color);\r\n    color: var(--lumo-primary-contrast-color);\r\n  }\r\n\r\n  :host([focused]) [part='remove-button'] {\r\n    color: inherit;\r\n  }\r\n\r\n  :host(:not([part~='overflow']):not([readonly]):not([disabled])) {\r\n    padding-inline-end: 0;\r\n  }\r\n\r\n  :host([part~='overflow']) {\r\n    position: relative;\r\n    min-width: var(--lumo-size-xxs);\r\n    margin-inline-start: var(--lumo-space-s);\r\n  }\r\n\r\n  :host([part~='overflow'])::before,\r\n  :host([part~='overflow'])::after {\r\n    position: absolute;\r\n    content: '';\r\n    width: 100%;\r\n    height: 100%;\r\n    border-left: calc(var(--lumo-space-s) / 4) solid;\r\n    border-radius: var(--lumo-border-radius-s);\r\n    border-color: var(--lumo-contrast-30pct);\r\n  }\r\n\r\n  :host([part~='overflow'])::before {\r\n    left: calc(-1 * var(--lumo-space-s) / 2);\r\n  }\r\n\r\n  :host([part~='overflow'])::after {\r\n    left: calc(-1 * var(--lumo-space-s));\r\n  }\r\n\r\n  :host([part~='overflow-two']) {\r\n    margin-inline-start: calc(var(--lumo-space-s) / 2);\r\n  }\r\n\r\n  :host([part~='overflow-two'])::after {\r\n    display: none;\r\n  }\r\n\r\n  :host([part~='overflow-one']) {\r\n    margin-inline-start: 0;\r\n  }\r\n\r\n  :host([part~='overflow-one'])::before,\r\n  :host([part~='overflow-one'])::after {\r\n    display: none;\r\n  }\r\n\r\n  [part='label'] {\r\n    font-weight: 500;\r\n    line-height: 1.25;\r\n  }\r\n\r\n  [part='remove-button'] {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-top: -0.3125em;\r\n    margin-bottom: -0.3125em;\r\n    margin-inline-start: auto;\r\n    width: 1.25em;\r\n    height: 1.25em;\r\n    font-size: 1.5em;\r\n    transition: none;\r\n  }\r\n\r\n  [part='remove-button']::before {\r\n    content: var(--lumo-icons-cross);\r\n  }\r\n\r\n  :host([disabled]) [part='label'] {\r\n    color: var(--lumo-disabled-text-color);\r\n    -webkit-text-fill-color: var(--lumo-disabled-text-color);\r\n    pointer-events: none;\r\n  }\r\n`;\r\n\r\nregisterStyles('vaadin-multi-select-combo-box-chip', [fieldButton, chip], {\r\n  moduleId: 'lumo-multi-select-combo-box-chip',\r\n});\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport '@vaadin/vaadin-lumo-styles/color.js';\r\nimport '@vaadin/vaadin-lumo-styles/font-icons.js';\r\nimport '@vaadin/vaadin-lumo-styles/style.js';\r\nimport '@vaadin/vaadin-lumo-styles/typography.js';\r\nimport { inputFieldShared } from '@vaadin/vaadin-lumo-styles/mixins/input-field-shared.js';\r\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\nregisterStyles(\r\n  'vaadin-multi-select-combo-box-item',\r\n  css`\r\n    @media (any-hover: hover) {\r\n      :host(:hover[readonly]) {\r\n        background-color: transparent;\r\n        cursor: default;\r\n      }\r\n    }\r\n  `,\r\n  {\r\n    moduleId: 'lumo-multi-select-combo-box-item',\r\n  },\r\n);\r\n\r\nconst multiSelectComboBox = css`\r\n  :host([has-value]) {\r\n    padding-inline-start: 0;\r\n  }\r\n\r\n  :host([has-value]) ::slotted(input:placeholder-shown) {\r\n    caret-color: var(--lumo-body-text-color) !important;\r\n  }\r\n\r\n  [part~='chip']:not(:last-of-type) {\r\n    margin-inline-end: var(--lumo-space-xs);\r\n  }\r\n\r\n  [part~='overflow']:not([hidden]) + :not(:empty) {\r\n    margin-inline-start: var(--lumo-space-xs);\r\n  }\r\n\r\n  [part='toggle-button']::before {\r\n    content: var(--lumo-icons-dropdown);\r\n  }\r\n\r\n  :host([readonly][has-value]) [part='toggle-button'] {\r\n    color: var(--lumo-contrast-60pct);\r\n    cursor: var(--lumo-clickable-cursor);\r\n  }\r\n`;\r\n\r\nregisterStyles('vaadin-multi-select-combo-box', [inputFieldShared, multiSelectComboBox], {\r\n  moduleId: 'lumo-multi-select-combo-box',\r\n});\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\n/**\r\n * An element used by `<vaadin-multi-select-combo-box>` to display selected items.\r\n *\r\n * ### Styling\r\n *\r\n * The following shadow DOM parts are available for styling:\r\n *\r\n * Part name        | Description\r\n * -----------------|-------------\r\n * `label`          | Element containing the label\r\n * `remove-button`  | Remove button\r\n *\r\n * See [Styling Components](https://vaadin.com/docs/latest/styling/custom-theme/styling-components) documentation.\r\n *\r\n * @extends HTMLElement\r\n * @private\r\n */\r\nclass MultiSelectComboBoxChip extends ThemableMixin(PolymerElement) {\r\n  static get is() {\r\n    return 'vaadin-multi-select-combo-box-chip';\r\n  }\r\n\r\n  static get properties() {\r\n    return {\r\n      disabled: {\r\n        type: Boolean,\r\n        reflectToAttribute: true,\r\n      },\r\n\r\n      readonly: {\r\n        type: Boolean,\r\n        reflectToAttribute: true,\r\n      },\r\n\r\n      label: {\r\n        type: String,\r\n      },\r\n\r\n      item: {\r\n        type: Object,\r\n      },\r\n    };\r\n  }\r\n\r\n  static get template() {\r\n    return html`\r\n      <style>\r\n        :host {\r\n          display: inline-flex;\r\n          align-items: center;\r\n          align-self: center;\r\n          white-space: nowrap;\r\n          box-sizing: border-box;\r\n        }\r\n\r\n        [part='label'] {\r\n          overflow: hidden;\r\n          text-overflow: ellipsis;\r\n        }\r\n\r\n        :host(:is([readonly], [disabled], [part~='overflow'])) [part='remove-button'] {\r\n          display: none !important;\r\n        }\r\n      </style>\r\n      <div part=\"label\">[[label]]</div>\r\n      <div part=\"remove-button\" role=\"button\" on-click=\"_onRemoveClick\"></div>\r\n    `;\r\n  }\r\n\r\n  /** @private */\r\n  _onRemoveClick(event) {\r\n    event.stopPropagation();\r\n\r\n    this.dispatchEvent(\r\n      new CustomEvent('item-removed', {\r\n        detail: {\r\n          item: this.item,\r\n        },\r\n        bubbles: true,\r\n        composed: true,\r\n      }),\r\n    );\r\n  }\r\n}\r\n\r\ncustomElements.define(MultiSelectComboBoxChip.is, MultiSelectComboBoxChip);\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { InputContainer } from '@vaadin/input-container/src/vaadin-input-container.js';\r\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\nregisterStyles(\r\n  'vaadin-multi-select-combo-box-container',\r\n  css`\r\n    #wrapper {\r\n      display: flex;\r\n      width: 100%;\r\n    }\r\n  `,\r\n  {\r\n    moduleId: 'vaadin-multi-select-combo-box-container-styles',\r\n  },\r\n);\r\n\r\nlet memoizedTemplate;\r\n\r\n/**\r\n * An element used internally by `<vaadin-multi-select-combo-box>`. Not intended to be used separately.\r\n *\r\n * @extends InputContainer\r\n * @private\r\n */\r\nclass MultiSelectComboBoxContainer extends InputContainer {\r\n  static get is() {\r\n    return 'vaadin-multi-select-combo-box-container';\r\n  }\r\n\r\n  static get template() {\r\n    if (!memoizedTemplate) {\r\n      memoizedTemplate = super.template.cloneNode(true);\r\n      const content = memoizedTemplate.content;\r\n      const slots = content.querySelectorAll('slot');\r\n\r\n      const wrapper = document.createElement('div');\r\n      wrapper.setAttribute('id', 'wrapper');\r\n      content.insertBefore(wrapper, slots[2]);\r\n\r\n      wrapper.appendChild(slots[0]);\r\n      wrapper.appendChild(slots[1]);\r\n    }\r\n    return memoizedTemplate;\r\n  }\r\n}\r\n\r\ncustomElements.define(MultiSelectComboBoxContainer.is, MultiSelectComboBoxContainer);\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { ComboBoxItem } from '@vaadin/combo-box/src/vaadin-combo-box-item.js';\r\n\r\n/**\r\n * An element used for items in `<vaadin-multi-select-combo-box>`.\r\n *\r\n * ### Styling\r\n *\r\n * The following shadow DOM parts are available for styling:\r\n *\r\n * Part name | Description\r\n * ----------|-------------\r\n * `content` | The element that wraps the item content\r\n *\r\n * The following state attributes are exposed for styling:\r\n *\r\n * Attribute  | Description                   | Part name\r\n * -----------|-------------------------------|-----------\r\n * `selected` | Set when the item is selected | :host\r\n * `focused`  | Set when the item is focused  | :host\r\n *\r\n * See [Styling Components](https://vaadin.com/docs/latest/styling/custom-theme/styling-components) documentation.\r\n *\r\n * @extends ComboBoxItem\r\n * @private\r\n */\r\nclass MultiSelectComboBoxItem extends ComboBoxItem {\r\n  static get is() {\r\n    return 'vaadin-multi-select-combo-box-item';\r\n  }\r\n}\r\n\r\ncustomElements.define(MultiSelectComboBoxItem.is, MultiSelectComboBoxItem);\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { ComboBoxOverlay } from '@vaadin/combo-box/src/vaadin-combo-box-overlay.js';\r\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\nregisterStyles(\r\n  'vaadin-multi-select-combo-box-overlay',\r\n  css`\r\n    #overlay {\r\n      width: var(\r\n        --vaadin-multi-select-combo-box-overlay-width,\r\n        var(--_vaadin-multi-select-combo-box-overlay-default-width, auto)\r\n      );\r\n    }\r\n  `,\r\n  { moduleId: 'vaadin-multi-select-combo-box-overlay-styles' },\r\n);\r\n\r\n/**\r\n * An element used internally by `<vaadin-multi-select-combo-box>`. Not intended to be used separately.\r\n *\r\n * @extends ComboBoxOverlay\r\n * @private\r\n */\r\nclass MultiSelectComboBoxOverlay extends ComboBoxOverlay {\r\n  static get is() {\r\n    return 'vaadin-multi-select-combo-box-overlay';\r\n  }\r\n}\r\n\r\ncustomElements.define(MultiSelectComboBoxOverlay.is, MultiSelectComboBoxOverlay);\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport { ComboBoxPlaceholder } from '@vaadin/combo-box/src/vaadin-combo-box-placeholder.js';\r\nimport { ComboBoxScroller } from '@vaadin/combo-box/src/vaadin-combo-box-scroller.js';\r\n\r\n/**\r\n * An element used internally by `<vaadin-multi-select-combo-box>`. Not intended to be used separately.\r\n *\r\n * @extends ComboBoxScroller\r\n * @private\r\n */\r\nclass MultiSelectComboBoxScroller extends ComboBoxScroller {\r\n  static get is() {\r\n    return 'vaadin-multi-select-combo-box-scroller';\r\n  }\r\n\r\n  /** @protected */\r\n  ready() {\r\n    super.ready();\r\n\r\n    this.setAttribute('aria-multiselectable', 'true');\r\n  }\r\n\r\n  /** @private */\r\n  __getAriaSelected(_focusedIndex, itemIndex) {\r\n    const item = this.items[itemIndex];\r\n    return this.__isItemSelected(item, null, this.itemIdPath).toString();\r\n  }\r\n\r\n  /** @private */\r\n  __isItemSelected(item, _selectedItem, itemIdPath) {\r\n    if (item instanceof ComboBoxPlaceholder) {\r\n      return false;\r\n    }\r\n\r\n    if (this.comboBox.readonly) {\r\n      return false;\r\n    }\r\n\r\n    return this.comboBox._findIndex(item, this.comboBox.selectedItems, itemIdPath) > -1;\r\n  }\r\n\r\n  /** @private */\r\n  __updateElement(el, index) {\r\n    super.__updateElement(el, index);\r\n\r\n    el.toggleAttribute('readonly', this.comboBox.readonly);\r\n  }\r\n}\r\n\r\ncustomElements.define(MultiSelectComboBoxScroller.is, MultiSelectComboBoxScroller);\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport './vaadin-multi-select-combo-box-item.js';\r\nimport './vaadin-multi-select-combo-box-overlay.js';\r\nimport './vaadin-multi-select-combo-box-scroller.js';\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { ComboBoxDataProviderMixin } from '@vaadin/combo-box/src/vaadin-combo-box-data-provider-mixin.js';\r\nimport { ComboBoxMixin } from '@vaadin/combo-box/src/vaadin-combo-box-mixin.js';\r\nimport { ComboBoxPlaceholder } from '@vaadin/combo-box/src/vaadin-combo-box-placeholder.js';\r\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\n/**\r\n * An element used internally by `<vaadin-multi-select-combo-box>`. Not intended to be used separately.\r\n *\r\n * @extends HTMLElement\r\n * @mixes ComboBoxDataProviderMixin\r\n * @mixes ComboBoxMixin\r\n * @mixes ThemableMixin\r\n * @private\r\n */\r\nclass MultiSelectComboBoxInternal extends ComboBoxDataProviderMixin(ComboBoxMixin(ThemableMixin(PolymerElement))) {\r\n  static get is() {\r\n    return 'vaadin-multi-select-combo-box-internal';\r\n  }\r\n\r\n  static get template() {\r\n    return html`\r\n      <style>\r\n        :host([opened]) {\r\n          pointer-events: auto;\r\n        }\r\n      </style>\r\n\r\n      <slot></slot>\r\n\r\n      <vaadin-multi-select-combo-box-overlay\r\n        id=\"overlay\"\r\n        opened=\"[[_overlayOpened]]\"\r\n        loading$=\"[[loading]]\"\r\n        theme$=\"[[_theme]]\"\r\n        position-target=\"[[_target]]\"\r\n        no-vertical-overlap\r\n        restore-focus-node=\"[[inputElement]]\"\r\n      ></vaadin-multi-select-combo-box-overlay>\r\n    `;\r\n  }\r\n\r\n  static get properties() {\r\n    return {\r\n      /**\r\n       * A subset of items, filtered based on the user input.\r\n       */\r\n      filteredItems: {\r\n        type: Array,\r\n        notify: true,\r\n      },\r\n\r\n      /**\r\n       * When set to `true`, \"loading\" attribute is set\r\n       * on the host and the overlay element.\r\n       * @type {boolean}\r\n       */\r\n      loading: {\r\n        type: Boolean,\r\n        notify: true,\r\n      },\r\n\r\n      /**\r\n       * Total number of items.\r\n       * @type {number | undefined}\r\n       */\r\n      size: {\r\n        type: Number,\r\n        notify: true,\r\n      },\r\n\r\n      /**\r\n       * Selected items to render in the dropdown\r\n       * when the component is read-only.\r\n       */\r\n      selectedItems: {\r\n        type: Array,\r\n        value: () => [],\r\n      },\r\n\r\n      /**\r\n       * Last input value entered by the user before value is updated.\r\n       * Used to store `filter` property value before clearing it.\r\n       */\r\n      lastFilter: {\r\n        type: String,\r\n        notify: true,\r\n      },\r\n\r\n      _target: {\r\n        type: Object,\r\n      },\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Reference to the clear button element.\r\n   * @protected\r\n   * @return {!HTMLElement}\r\n   */\r\n  get clearElement() {\r\n    return this.querySelector('[part=\"clear-button\"]');\r\n  }\r\n\r\n  /**\r\n   * Tag name prefix used by scroller and items.\r\n   * @protected\r\n   * @return {string}\r\n   */\r\n  get _tagNamePrefix() {\r\n    return 'vaadin-multi-select-combo-box';\r\n  }\r\n\r\n  /**\r\n   * Override method inherited from the combo-box\r\n   * to allow opening dropdown when readonly.\r\n   * @override\r\n   */\r\n  open() {\r\n    if (!this.disabled && !(this.readonly && this.selectedItems.length === 0)) {\r\n      this.opened = true;\r\n    }\r\n  }\r\n\r\n  /** @protected */\r\n  ready() {\r\n    super.ready();\r\n\r\n    this._target = this;\r\n    this._toggleElement = this.querySelector('.toggle-button');\r\n  }\r\n\r\n  /**\r\n   * Override combo-box method to set correct owner for using by item renderers.\r\n   * This needs to be done before the scroller gets added to the DOM to ensure\r\n   * Lit directive works in case when combo-box is opened using attribute.\r\n   *\r\n   * @protected\r\n   * @override\r\n   */\r\n  _initScroller() {\r\n    const comboBox = this.getRootNode().host;\r\n\r\n    super._initScroller(comboBox);\r\n  }\r\n\r\n  /**\r\n   * Override method from `InputMixin`.\r\n   *\r\n   * @protected\r\n   * @override\r\n   */\r\n  clear() {\r\n    super.clear();\r\n\r\n    if (this.inputElement) {\r\n      this.inputElement.value = '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Override Enter handler to keep overlay open\r\n   * when item is selected or unselected.\r\n   * @param {!Event} event\r\n   * @protected\r\n   * @override\r\n   */\r\n  _onEnter(event) {\r\n    this.__enterPressed = true;\r\n\r\n    super._onEnter(event);\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @override\r\n   */\r\n  _closeOrCommit() {\r\n    if (this.readonly) {\r\n      this.close();\r\n      return;\r\n    }\r\n\r\n    if (this.__enterPressed) {\r\n      this.__enterPressed = null;\r\n\r\n      // Keep selected item focused after committing on Enter.\r\n      const focusedItem = this.filteredItems[this._focusedIndex];\r\n      this._commitValue();\r\n      this._focusedIndex = this.filteredItems.indexOf(focusedItem);\r\n\r\n      return;\r\n    }\r\n\r\n    super._closeOrCommit();\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @override\r\n   */\r\n  _commitValue() {\r\n    // Store filter value for checking if user input is matching\r\n    // an item which is already selected, to not un-select it.\r\n    this.lastFilter = this.filter;\r\n\r\n    super._commitValue();\r\n  }\r\n\r\n  /**\r\n   * Override method inherited from the combo-box\r\n   * to not update focused item when readonly.\r\n   * @protected\r\n   * @override\r\n   */\r\n  _onArrowDown() {\r\n    if (!this.readonly) {\r\n      super._onArrowDown();\r\n    } else if (!this.opened) {\r\n      this.open();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Override method inherited from the combo-box\r\n   * to not update focused item when readonly.\r\n   * @protected\r\n   * @override\r\n   */\r\n  _onArrowUp() {\r\n    if (!this.readonly) {\r\n      super._onArrowUp();\r\n    } else if (!this.opened) {\r\n      this.open();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Override method inherited from the combo-box\r\n   * to close dropdown on blur when readonly.\r\n   * @param {FocusEvent} event\r\n   * @protected\r\n   * @override\r\n   */\r\n  _onFocusout(event) {\r\n    // Disable combo-box logic that updates selectedItem\r\n    // based on the overlay focused index on input blur\r\n    this._ignoreCommitValue = true;\r\n\r\n    super._onFocusout(event);\r\n\r\n    if (this.readonly && !this._closeOnBlurIsPrevented) {\r\n      this.close();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Override method inherited from the combo-box\r\n   * to not commit an already selected item again\r\n   * on blur, which would result in un-selecting.\r\n   * @protected\r\n   * @override\r\n   */\r\n  _detectAndDispatchChange() {\r\n    if (this._ignoreCommitValue) {\r\n      this._ignoreCommitValue = false;\r\n\r\n      // Reset internal combo-box state\r\n      this.selectedItem = null;\r\n      this._inputElementValue = '';\r\n      return;\r\n    }\r\n\r\n    super._detectAndDispatchChange();\r\n  }\r\n\r\n  /**\r\n   * @param {CustomEvent} event\r\n   * @protected\r\n   * @override\r\n   */\r\n  _overlaySelectedItemChanged(event) {\r\n    event.stopPropagation();\r\n\r\n    // Do not un-select on click when readonly\r\n    if (this.readonly) {\r\n      return;\r\n    }\r\n\r\n    if (event.detail.item instanceof ComboBoxPlaceholder) {\r\n      return;\r\n    }\r\n\r\n    if (this.opened) {\r\n      this.dispatchEvent(\r\n        new CustomEvent('combo-box-item-selected', {\r\n          detail: {\r\n            item: event.detail.item,\r\n          },\r\n        }),\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Override method inherited from the combo-box\r\n   * to not request data provider when read-only.\r\n   *\r\n   * @param {number}\r\n   * @return {boolean}\r\n   * @protected\r\n   * @override\r\n   */\r\n  _shouldLoadPage(page) {\r\n    if (this.readonly) {\r\n      return false;\r\n    }\r\n\r\n    return super._shouldLoadPage(page);\r\n  }\r\n\r\n  /**\r\n   * Override method inherited from the combo-box\r\n   * to not clear the data provider cache when read-only.\r\n   *\r\n   * @protected\r\n   * @override\r\n   */\r\n  clearCache() {\r\n    if (this.readonly) {\r\n      return;\r\n    }\r\n\r\n    super.clearCache();\r\n  }\r\n}\r\n\r\ncustomElements.define(MultiSelectComboBoxInternal.is, MultiSelectComboBoxInternal);\r\n", "/**\r\n * @license\r\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\r\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\r\n */\r\nimport './vaadin-multi-select-combo-box-chip.js';\r\nimport './vaadin-multi-select-combo-box-container.js';\r\nimport './vaadin-multi-select-combo-box-internal.js';\r\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { announce } from '@vaadin/component-base/src/a11y-announcer.js';\r\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\r\nimport { ResizeMixin } from '@vaadin/component-base/src/resize-mixin.js';\r\nimport { processTemplates } from '@vaadin/component-base/src/templates.js';\r\nimport { InputControlMixin } from '@vaadin/field-base/src/input-control-mixin.js';\r\nimport { InputController } from '@vaadin/field-base/src/input-controller.js';\r\nimport { LabelledInputController } from '@vaadin/field-base/src/labelled-input-controller.js';\r\nimport { inputFieldShared } from '@vaadin/field-base/src/styles/input-field-shared-styles.js';\r\nimport { css, registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\r\n\r\nconst multiSelectComboBox = css`\r\n  :host {\r\n    --input-min-width: var(--vaadin-multi-select-combo-box-input-min-width, 4em);\r\n  }\r\n\r\n  [hidden] {\r\n    display: none !important;\r\n  }\r\n\r\n  #chips {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n\r\n  ::slotted(input) {\r\n    box-sizing: border-box;\r\n    flex: 1 0 var(--input-min-width);\r\n  }\r\n\r\n  [part='chip'] {\r\n    flex: 0 1 auto;\r\n  }\r\n\r\n  :host(:is([readonly], [disabled])) ::slotted(input) {\r\n    flex-grow: 0;\r\n    flex-basis: 0;\r\n    padding: 0;\r\n  }\r\n`;\r\n\r\nregisterStyles('vaadin-multi-select-combo-box', [inputFieldShared, multiSelectComboBox], {\r\n  moduleId: 'vaadin-multi-select-combo-box-styles',\r\n});\r\n\r\n/**\r\n * `<vaadin-multi-select-combo-box>` is a web component that wraps `<vaadin-combo-box>` and extends\r\n * its functionality to allow selecting multiple items, in addition to basic features.\r\n *\r\n * ```html\r\n * <vaadin-multi-select-combo-box id=\"comboBox\"></vaadin-multi-select-combo-box>\r\n * ```\r\n *\r\n * ```js\r\n * const comboBox = document.querySelector('#comboBox');\r\n * comboBox.items = ['apple', 'banana', 'lemon', 'orange'];\r\n * comboBox.selectedItems = ['lemon', 'orange'];\r\n * ```\r\n *\r\n * ### Styling\r\n *\r\n * The following shadow DOM parts are available for styling:\r\n *\r\n * Part name              | Description\r\n * -----------------------|----------------\r\n * `chips`                | The element that wraps chips for selected items\r\n * `chip`                 | Chip shown for every selected item\r\n * `label`                | The label element\r\n * `input-field`          | The element that wraps prefix, value and suffix\r\n * `clear-button`         | The clear button\r\n * `error-message`        | The error message element\r\n * `helper-text`          | The helper text element wrapper\r\n * `required-indicator`   | The `required` state indicator element\r\n * `overflow`             | The chip shown when component width is not enough to fit all chips\r\n * `overflow-one`         | Set on the overflow chip when only one chip does not fit\r\n * `overflow-two`         | Set on the overflow chip when two chips do not fit\r\n * `toggle-button`        | The toggle button\r\n *\r\n * The following state attributes are available for styling:\r\n *\r\n * Attribute              | Description\r\n * -----------------------|-----------------\r\n * `disabled`             | Set to a disabled element\r\n * `has-value`            | Set when the element has a value\r\n * `has-label`            | Set when the element has a label\r\n * `has-helper`           | Set when the element has helper text or slot\r\n * `has-error-message`    | Set when the element has an error message\r\n * `invalid`              | Set when the element is invalid\r\n * `focused`              | Set when the element is focused\r\n * `focus-ring`           | Set when the element is keyboard focused\r\n * `loading`              | Set when loading items from the data provider\r\n * `opened`               | Set when the dropdown is open\r\n * `readonly`             | Set to a readonly element\r\n *\r\n * The following custom CSS properties are available for styling:\r\n *\r\n * Custom property                                      | Description                | Default\r\n * -----------------------------------------------------|----------------------------|--------\r\n * `--vaadin-field-default-width`                       | Default width of the field | `12em`\r\n * `--vaadin-multi-select-combo-box-overlay-width`      | Width of the overlay       | `auto`\r\n * `--vaadin-multi-select-combo-box-overlay-max-height` | Max height of the overlay  | `65vh`\r\n * `--vaadin-multi-select-combo-box-input-min-width`    | Min width of the input     | `4em`\r\n *\r\n * ### Internal components\r\n *\r\n * In addition to `<vaadin-multi-select-combo-box>` itself, the following internal\r\n * components are themable:\r\n *\r\n * - `<vaadin-multi-select-combo-box-overlay>` - has the same API as `<vaadin-overlay>`.\r\n * - `<vaadin-multi-select-combo-box-item>` - has the same API as `<vaadin-item>`.\r\n * - `<vaadin-multi-select-combo-box-container>` - has the same API as `<vaadin-input-container>`.\r\n *\r\n * Note: the `theme` attribute value set on `<vaadin-multi-select-combo-box>` is\r\n * propagated to these components.\r\n *\r\n * See [Styling Components](https://vaadin.com/docs/latest/styling/custom-theme/styling-components) documentation.\r\n *\r\n * @fires {Event} change - Fired when the user commits a value change.\r\n * @fires {CustomEvent} custom-value-set - Fired when the user sets a custom value.\r\n * @fires {CustomEvent} filter-changed - Fired when the `filter` property changes.\r\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\r\n * @fires {CustomEvent} selected-items-changed - Fired when the `selectedItems` property changes.\r\n * @fires {CustomEvent} validated - Fired whenever the field is validated.\r\n *\r\n * @extends HTMLElement\r\n * @mixes ElementMixin\r\n * @mixes ThemableMixin\r\n * @mixes InputControlMixin\r\n * @mixes ResizeMixin\r\n */\r\nclass MultiSelectComboBox extends ResizeMixin(InputControlMixin(ThemableMixin(ElementMixin(PolymerElement)))) {\r\n  static get is() {\r\n    return 'vaadin-multi-select-combo-box';\r\n  }\r\n\r\n  static get template() {\r\n    return html`\r\n      <div class=\"vaadin-multi-select-combo-box-container\">\r\n        <div part=\"label\">\r\n          <slot name=\"label\"></slot>\r\n          <span part=\"required-indicator\" aria-hidden=\"true\" on-click=\"focus\"></span>\r\n        </div>\r\n\r\n        <vaadin-multi-select-combo-box-internal\r\n          id=\"comboBox\"\r\n          items=\"[[__effectiveItems]]\"\r\n          item-id-path=\"[[itemIdPath]]\"\r\n          item-label-path=\"[[itemLabelPath]]\"\r\n          item-value-path=\"[[itemValuePath]]\"\r\n          disabled=\"[[disabled]]\"\r\n          readonly=\"[[readonly]]\"\r\n          auto-open-disabled=\"[[autoOpenDisabled]]\"\r\n          allow-custom-value=\"[[allowCustomValue]]\"\r\n          data-provider=\"[[dataProvider]]\"\r\n          filter=\"{{filter}}\"\r\n          last-filter=\"{{_lastFilter}}\"\r\n          loading=\"{{loading}}\"\r\n          size=\"{{size}}\"\r\n          filtered-items=\"[[__effectiveFilteredItems]]\"\r\n          selected-items=\"[[selectedItems]]\"\r\n          opened=\"{{opened}}\"\r\n          renderer=\"[[renderer]]\"\r\n          theme$=\"[[_theme]]\"\r\n          on-combo-box-item-selected=\"_onComboBoxItemSelected\"\r\n          on-change=\"_onComboBoxChange\"\r\n          on-custom-value-set=\"_onCustomValueSet\"\r\n          on-filtered-items-changed=\"_onFilteredItemsChanged\"\r\n        >\r\n          <vaadin-multi-select-combo-box-container\r\n            part=\"input-field\"\r\n            readonly=\"[[readonly]]\"\r\n            disabled=\"[[disabled]]\"\r\n            invalid=\"[[invalid]]\"\r\n            theme$=\"[[_theme]]\"\r\n          >\r\n            <vaadin-multi-select-combo-box-chip\r\n              id=\"overflow\"\r\n              slot=\"prefix\"\r\n              part$=\"[[_getOverflowPart(_overflowItems.length)]]\"\r\n              disabled=\"[[disabled]]\"\r\n              readonly=\"[[readonly]]\"\r\n              label=\"[[_getOverflowLabel(_overflowItems.length)]]\"\r\n              title$=\"[[_getOverflowTitle(_overflowItems)]]\"\r\n              hidden$=\"[[_isOverflowHidden(_overflowItems.length)]]\"\r\n              on-mousedown=\"_preventBlur\"\r\n            ></vaadin-multi-select-combo-box-chip>\r\n            <div id=\"chips\" part=\"chips\" slot=\"prefix\"></div>\r\n            <slot name=\"input\"></slot>\r\n            <div\r\n              id=\"clearButton\"\r\n              part=\"clear-button\"\r\n              slot=\"suffix\"\r\n              on-touchend=\"_onClearButtonTouchend\"\r\n              aria-hidden=\"true\"\r\n            ></div>\r\n            <div id=\"toggleButton\" class=\"toggle-button\" part=\"toggle-button\" slot=\"suffix\" aria-hidden=\"true\"></div>\r\n          </vaadin-multi-select-combo-box-container>\r\n        </vaadin-multi-select-combo-box-internal>\r\n\r\n        <div part=\"helper-text\">\r\n          <slot name=\"helper\"></slot>\r\n        </div>\r\n\r\n        <div part=\"error-message\">\r\n          <slot name=\"error-message\"></slot>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  static get properties() {\r\n    return {\r\n      /**\r\n       * Set true to prevent the overlay from opening automatically.\r\n       * @attr {boolean} auto-open-disabled\r\n       */\r\n      autoOpenDisabled: Boolean,\r\n\r\n      /**\r\n       * Set to true to display the clear icon which clears the input.\r\n       * @attr {boolean} clear-button-visible\r\n       */\r\n      clearButtonVisible: {\r\n        type: Boolean,\r\n        reflectToAttribute: true,\r\n        observer: '_clearButtonVisibleChanged',\r\n        value: false,\r\n      },\r\n\r\n      /**\r\n       * A full set of items to filter the visible options from.\r\n       * The items can be of either `String` or `Object` type.\r\n       */\r\n      items: {\r\n        type: Array,\r\n      },\r\n\r\n      /**\r\n       * The item property used for a visual representation of the item.\r\n       * @attr {string} item-label-path\r\n       */\r\n      itemLabelPath: {\r\n        type: String,\r\n        value: 'label',\r\n      },\r\n\r\n      /**\r\n       * Path for the value of the item. If `items` is an array of objects,\r\n       * this property is used as a string value for the selected item.\r\n       * @attr {string} item-value-path\r\n       */\r\n      itemValuePath: {\r\n        type: String,\r\n        value: 'value',\r\n      },\r\n\r\n      /**\r\n       * Path for the id of the item, used to detect whether the item is selected.\r\n       * @attr {string} item-id-path\r\n       */\r\n      itemIdPath: {\r\n        type: String,\r\n      },\r\n\r\n      /**\r\n       * The object used to localize this component.\r\n       * To change the default localization, replace the entire\r\n       * _i18n_ object or just the property you want to modify.\r\n       *\r\n       * The object has the following JSON structure and default values:\r\n       * ```\r\n       * {\r\n       *   // Screen reader announcement on clear button click.\r\n       *   cleared: 'Selection cleared',\r\n       *   // Screen reader announcement when a chip is focused.\r\n       *   focused: ' focused. Press Backspace to remove',\r\n       *   // Screen reader announcement when item is selected.\r\n       *   selected: 'added to selection',\r\n       *   // Screen reader announcement when item is deselected.\r\n       *   deselected: 'removed from selection',\r\n       *   // Screen reader announcement of the selected items count.\r\n       *   // {count} is replaced with the actual count of items.\r\n       *   total: '{count} items selected',\r\n       * }\r\n       * ```\r\n       * @type {!MultiSelectComboBoxI18n}\r\n       * @default {English/US}\r\n       */\r\n      i18n: {\r\n        type: Object,\r\n        value: () => {\r\n          return {\r\n            cleared: 'Selection cleared',\r\n            focused: 'focused. Press Backspace to remove',\r\n            selected: 'added to selection',\r\n            deselected: 'removed from selection',\r\n            total: '{count} items selected',\r\n          };\r\n        },\r\n      },\r\n\r\n      /**\r\n       * True when loading items from the data provider, false otherwise.\r\n       */\r\n      loading: {\r\n        type: Boolean,\r\n        value: false,\r\n        reflectToAttribute: true,\r\n      },\r\n\r\n      /**\r\n       * When present, it specifies that the field is read-only.\r\n       */\r\n      readonly: {\r\n        type: Boolean,\r\n        value: false,\r\n        observer: '_readonlyChanged',\r\n        reflectToAttribute: true,\r\n      },\r\n\r\n      /**\r\n       * The list of selected items.\r\n       * Note: modifying the selected items creates a new array each time.\r\n       */\r\n      selectedItems: {\r\n        type: Array,\r\n        value: () => [],\r\n        notify: true,\r\n      },\r\n\r\n      /**\r\n       * True if the dropdown is open, false otherwise.\r\n       */\r\n      opened: {\r\n        type: Boolean,\r\n        notify: true,\r\n        value: false,\r\n        reflectToAttribute: true,\r\n      },\r\n\r\n      /**\r\n       * Total number of items.\r\n       */\r\n      size: {\r\n        type: Number,\r\n      },\r\n\r\n      /**\r\n       * Number of items fetched at a time from the data provider.\r\n       * @attr {number} page-size\r\n       */\r\n      pageSize: {\r\n        type: Number,\r\n        value: 50,\r\n        observer: '_pageSizeChanged',\r\n      },\r\n\r\n      /**\r\n       * Function that provides items lazily. Receives two arguments:\r\n       *\r\n       * - `params` - Object with the following properties:\r\n       *   - `params.page` Requested page index\r\n       *   - `params.pageSize` Current page size\r\n       *   - `params.filter` Currently applied filter\r\n       *\r\n       * - `callback(items, size)` - Callback function with arguments:\r\n       *   - `items` Current page of items\r\n       *   - `size` Total number of items.\r\n       */\r\n      dataProvider: {\r\n        type: Object,\r\n      },\r\n\r\n      /**\r\n       * When true, the user can input a value that is not present in the items list.\r\n       * @attr {boolean} allow-custom-value\r\n       */\r\n      allowCustomValue: {\r\n        type: Boolean,\r\n        value: false,\r\n      },\r\n\r\n      /**\r\n       * A hint to the user of what can be entered in the control.\r\n       * The placeholder will be only displayed in the case when\r\n       * there is no item selected.\r\n       */\r\n      placeholder: {\r\n        type: String,\r\n        value: '',\r\n        observer: '_placeholderChanged',\r\n      },\r\n\r\n      /**\r\n       * Custom function for rendering the content of every item.\r\n       * Receives three arguments:\r\n       *\r\n       * - `root` The `<vaadin-multi-select-combo-box-item>` internal container DOM element.\r\n       * - `comboBox` The reference to the `<vaadin-multi-select-combo-box>` element.\r\n       * - `model` The object with the properties related with the rendered\r\n       *   item, contains:\r\n       *   - `model.index` The index of the rendered item.\r\n       *   - `model.item` The item.\r\n       */\r\n      renderer: Function,\r\n\r\n      /**\r\n       * Filtering string the user has typed into the input field.\r\n       */\r\n      filter: {\r\n        type: String,\r\n        value: '',\r\n        notify: true,\r\n      },\r\n\r\n      /**\r\n       * A subset of items, filtered based on the user input. Filtered items\r\n       * can be assigned directly to omit the internal filtering functionality.\r\n       * The items can be of either `String` or `Object` type.\r\n       */\r\n      filteredItems: Array,\r\n\r\n      /** @private */\r\n      value: {\r\n        type: String,\r\n      },\r\n\r\n      /** @private */\r\n      __effectiveItems: {\r\n        type: Array,\r\n        computed: '__computeEffectiveItems(items, selectedItems, readonly)',\r\n      },\r\n\r\n      /** @private */\r\n      __effectiveFilteredItems: {\r\n        type: Array,\r\n        computed: '__computeEffectiveFilteredItems(items, filteredItems, selectedItems, readonly)',\r\n      },\r\n\r\n      /** @private */\r\n      _overflowItems: {\r\n        type: Array,\r\n        value: () => [],\r\n      },\r\n\r\n      /** @private */\r\n      _focusedChipIndex: {\r\n        type: Number,\r\n        value: -1,\r\n        observer: '_focusedChipIndexChanged',\r\n      },\r\n\r\n      /** @private */\r\n      _lastFilter: {\r\n        type: String,\r\n      },\r\n    };\r\n  }\r\n\r\n  static get observers() {\r\n    return ['_selectedItemsChanged(selectedItems, selectedItems.*)'];\r\n  }\r\n\r\n  /** @protected */\r\n  get slotStyles() {\r\n    const tag = this.localName;\r\n    return [\r\n      ...super.slotStyles,\r\n      `\r\n        ${tag}[has-value] input::placeholder {\r\n          color: transparent !important;\r\n        }\r\n      `,\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Used by `InputControlMixin` as a reference to the clear button element.\r\n   * @protected\r\n   * @return {!HTMLElement}\r\n   */\r\n  get clearElement() {\r\n    return this.$.clearButton;\r\n  }\r\n\r\n  /** @protected */\r\n  get _chips() {\r\n    return this.shadowRoot.querySelectorAll('[part~=\"chip\"]');\r\n  }\r\n\r\n  /** @protected */\r\n  ready() {\r\n    super.ready();\r\n\r\n    this.addController(\r\n      new InputController(this, (input) => {\r\n        this._setInputElement(input);\r\n        this._setFocusElement(input);\r\n        this.stateTarget = input;\r\n        this.ariaTarget = input;\r\n      }),\r\n    );\r\n    this.addController(new LabelledInputController(this.inputElement, this._labelController));\r\n\r\n    this._inputField = this.shadowRoot.querySelector('[part=\"input-field\"]');\r\n    this.__updateChips();\r\n\r\n    processTemplates(this);\r\n  }\r\n\r\n  /**\r\n   * Returns true if the current input value satisfies all constraints (if any).\r\n   * @return {boolean}\r\n   */\r\n  checkValidity() {\r\n    return this.required && !this.readonly ? this._hasValue : true;\r\n  }\r\n\r\n  /**\r\n   * Clears the selected items.\r\n   */\r\n  clear() {\r\n    this.__updateSelection([]);\r\n\r\n    announce(this.i18n.cleared);\r\n  }\r\n\r\n  /**\r\n   * Clears the cached pages and reloads data from data provider when needed.\r\n   */\r\n  clearCache() {\r\n    if (this.$ && this.$.comboBox) {\r\n      this.$.comboBox.clearCache();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Requests an update for the content of items.\r\n   * While performing the update, it invokes the renderer (passed in the `renderer` property) once an item.\r\n   *\r\n   * It is not guaranteed that the update happens immediately (synchronously) after it is requested.\r\n   */\r\n  requestContentUpdate() {\r\n    if (this.$ && this.$.comboBox) {\r\n      this.$.comboBox.requestContentUpdate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Override method inherited from `DisabledMixin` to forward disabled to chips.\r\n   * @protected\r\n   * @override\r\n   */\r\n  _disabledChanged(disabled, oldDisabled) {\r\n    super._disabledChanged(disabled, oldDisabled);\r\n\r\n    if (disabled || oldDisabled) {\r\n      this.__updateChips();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Override method inherited from `InputMixin` to forward the input to combo-box.\r\n   * @protected\r\n   * @override\r\n   */\r\n  _inputElementChanged(input) {\r\n    super._inputElementChanged(input);\r\n\r\n    if (input) {\r\n      this.$.comboBox._setInputElement(input);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Override method inherited from `FocusMixin` to validate on blur.\r\n   * @param {boolean} focused\r\n   * @protected\r\n   */\r\n  _setFocused(focused) {\r\n    super._setFocused(focused);\r\n\r\n    if (!focused) {\r\n      this._focusedChipIndex = -1;\r\n      this.validate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Implement callback from `ResizeMixin` to update chips.\r\n   * @protected\r\n   * @override\r\n   */\r\n  _onResize() {\r\n    this.__updateChips();\r\n  }\r\n\r\n  /**\r\n   * Override method from `DelegateStateMixin` to set required state\r\n   * using `aria-required` attribute instead of `required`, in order\r\n   * to prevent screen readers from announcing \"invalid entry\".\r\n   * @protected\r\n   * @override\r\n   */\r\n  _delegateAttribute(name, value) {\r\n    if (!this.stateTarget) {\r\n      return;\r\n    }\r\n\r\n    if (name === 'required') {\r\n      this._delegateAttribute('aria-required', value ? 'true' : false);\r\n      return;\r\n    }\r\n\r\n    super._delegateAttribute(name, value);\r\n  }\r\n\r\n  /**\r\n   * Setting clear button visible reduces total space available\r\n   * for rendering chips, and making it hidden increases it.\r\n   * @private\r\n   */\r\n  _clearButtonVisibleChanged(visible, oldVisible) {\r\n    if (visible || oldVisible) {\r\n      this.__updateChips();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Implement two-way binding for the `filteredItems` property\r\n   * that can be set on the internal combo-box element.\r\n   *\r\n   * @param {CustomEvent} event\r\n   * @private\r\n   */\r\n  _onFilteredItemsChanged(event) {\r\n    const { value } = event.detail;\r\n    if (Array.isArray(value) || value == null) {\r\n      this.filteredItems = value;\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _readonlyChanged(readonly, oldReadonly) {\r\n    if (readonly || oldReadonly) {\r\n      this.__updateChips();\r\n    }\r\n\r\n    if (this.dataProvider) {\r\n      this.clearCache();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _pageSizeChanged(pageSize, oldPageSize) {\r\n    if (Math.floor(pageSize) !== pageSize || pageSize <= 0) {\r\n      this.pageSize = oldPageSize;\r\n      console.error('\"pageSize\" value must be an integer > 0');\r\n    }\r\n\r\n    this.$.comboBox.pageSize = this.pageSize;\r\n  }\r\n\r\n  /** @private */\r\n  _placeholderChanged(placeholder) {\r\n    const tmpPlaceholder = this.__tmpA11yPlaceholder;\r\n    // Do not store temporary placeholder\r\n    if (tmpPlaceholder !== placeholder) {\r\n      this.__savedPlaceholder = placeholder;\r\n\r\n      if (tmpPlaceholder) {\r\n        this.placeholder = tmpPlaceholder;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _selectedItemsChanged(selectedItems) {\r\n    this._toggleHasValue(this._hasValue);\r\n\r\n    // Use placeholder for announcing items\r\n    if (this._hasValue) {\r\n      const tmpPlaceholder = this._mergeItemLabels(selectedItems);\r\n      this.__tmpA11yPlaceholder = tmpPlaceholder;\r\n      this.placeholder = tmpPlaceholder;\r\n    } else {\r\n      delete this.__tmpA11yPlaceholder;\r\n      this.placeholder = this.__savedPlaceholder;\r\n    }\r\n\r\n    // Re-render chips\r\n    this.__updateChips();\r\n\r\n    // Update selected for dropdown items\r\n    this.requestContentUpdate();\r\n  }\r\n\r\n  /** @private */\r\n  _getItemLabel(item) {\r\n    return this.$.comboBox._getItemLabel(item);\r\n  }\r\n\r\n  /** @private */\r\n  _getOverflowLabel(length) {\r\n    return length;\r\n  }\r\n\r\n  /** @private */\r\n  _getOverflowPart(length) {\r\n    let part = `chip overflow`;\r\n\r\n    if (length === 1) {\r\n      part += ' overflow-one';\r\n    } else if (length === 2) {\r\n      part += ' overflow-two';\r\n    }\r\n\r\n    return part;\r\n  }\r\n\r\n  /** @private */\r\n  _getOverflowTitle(items) {\r\n    return this._mergeItemLabels(items);\r\n  }\r\n\r\n  /** @private */\r\n  _isOverflowHidden(length) {\r\n    return length === 0;\r\n  }\r\n\r\n  /** @private */\r\n  _mergeItemLabels(items) {\r\n    return items.map((item) => this._getItemLabel(item)).join(', ');\r\n  }\r\n\r\n  /** @private */\r\n  _findIndex(item, selectedItems, itemIdPath) {\r\n    if (itemIdPath && item) {\r\n      for (let index = 0; index < selectedItems.length; index++) {\r\n        if (selectedItems[index] && selectedItems[index][itemIdPath] === item[itemIdPath]) {\r\n          return index;\r\n        }\r\n      }\r\n      return -1;\r\n    }\r\n\r\n    return selectedItems.indexOf(item);\r\n  }\r\n\r\n  /** @private */\r\n  __clearFilter() {\r\n    this.filter = '';\r\n    this.$.comboBox.clear();\r\n  }\r\n\r\n  /** @private */\r\n  __announceItem(itemLabel, isSelected, itemCount) {\r\n    const state = isSelected ? 'selected' : 'deselected';\r\n    const total = this.i18n.total.replace('{count}', itemCount || 0);\r\n    announce(`${itemLabel} ${this.i18n[state]} ${total}`);\r\n  }\r\n\r\n  /** @private */\r\n  __removeItem(item) {\r\n    const itemsCopy = [...this.selectedItems];\r\n    itemsCopy.splice(itemsCopy.indexOf(item), 1);\r\n    this.__updateSelection(itemsCopy);\r\n    const itemLabel = this._getItemLabel(item);\r\n    this.__announceItem(itemLabel, false, itemsCopy.length);\r\n  }\r\n\r\n  /** @private */\r\n  __selectItem(item) {\r\n    const itemsCopy = [...this.selectedItems];\r\n\r\n    const index = this._findIndex(item, itemsCopy, this.itemIdPath);\r\n    const itemLabel = this._getItemLabel(item);\r\n\r\n    let isSelected = false;\r\n\r\n    if (index !== -1) {\r\n      const lastFilter = this._lastFilter;\r\n      // Do not unselect when manually typing and committing an already selected item.\r\n      if (lastFilter && lastFilter.toLowerCase() === itemLabel.toLowerCase()) {\r\n        this.__clearFilter();\r\n        return;\r\n      }\r\n\r\n      itemsCopy.splice(index, 1);\r\n    } else {\r\n      itemsCopy.push(item);\r\n      isSelected = true;\r\n    }\r\n\r\n    this.__updateSelection(itemsCopy);\r\n\r\n    // Suppress `value-changed` event.\r\n    this.__clearFilter();\r\n\r\n    this.__announceItem(itemLabel, isSelected, itemsCopy.length);\r\n  }\r\n\r\n  /** @private */\r\n  __updateSelection(selectedItems) {\r\n    this.selectedItems = selectedItems;\r\n\r\n    this.validate();\r\n\r\n    this.dispatchEvent(new CustomEvent('change', { bubbles: true }));\r\n  }\r\n\r\n  /** @private */\r\n  __createChip(item) {\r\n    const chip = document.createElement('vaadin-multi-select-combo-box-chip');\r\n    chip.setAttribute('part', 'chip');\r\n    chip.setAttribute('slot', 'prefix');\r\n\r\n    chip.item = item;\r\n    chip.disabled = this.disabled;\r\n    chip.readonly = this.readonly;\r\n\r\n    const label = this._getItemLabel(item);\r\n    chip.label = label;\r\n    chip.setAttribute('title', label);\r\n\r\n    chip.addEventListener('item-removed', (e) => this._onItemRemoved(e));\r\n    chip.addEventListener('mousedown', (e) => this._preventBlur(e));\r\n\r\n    return chip;\r\n  }\r\n\r\n  /** @private */\r\n  __getOverflowWidth() {\r\n    const chip = this.$.overflow;\r\n\r\n    chip.style.visibility = 'hidden';\r\n    chip.removeAttribute('hidden');\r\n\r\n    // Detect max possible width of the overflow chip\r\n    chip.setAttribute('part', 'chip overflow');\r\n    const overflowStyle = getComputedStyle(chip);\r\n    const overflowWidth = chip.clientWidth + parseInt(overflowStyle.marginInlineStart);\r\n\r\n    chip.setAttribute('hidden', '');\r\n    chip.style.visibility = '';\r\n\r\n    return overflowWidth;\r\n  }\r\n\r\n  /** @private */\r\n  __updateChips() {\r\n    if (!this._inputField) {\r\n      return;\r\n    }\r\n\r\n    // Clear all chips except the overflow\r\n    Array.from(this._chips).forEach((chip) => {\r\n      if (chip !== this.$.overflow) {\r\n        chip.remove();\r\n      }\r\n    });\r\n\r\n    const items = [...this.selectedItems];\r\n\r\n    // Detect available remaining width for chips\r\n    const totalWidth = this._inputField.$.wrapper.clientWidth;\r\n    const inputWidth = parseInt(getComputedStyle(this.inputElement).flexBasis);\r\n\r\n    let remainingWidth = totalWidth - inputWidth;\r\n\r\n    if (items.length > 1) {\r\n      remainingWidth -= this.__getOverflowWidth();\r\n    }\r\n\r\n    // Add chips until remaining width is exceeded\r\n    for (let i = items.length - 1, refNode = null; i >= 0; i--) {\r\n      const chip = this.__createChip(items[i]);\r\n      this.$.chips.insertBefore(chip, refNode);\r\n\r\n      if (this.$.chips.clientWidth > remainingWidth) {\r\n        chip.remove();\r\n        break;\r\n      }\r\n\r\n      items.pop();\r\n      refNode = chip;\r\n    }\r\n\r\n    this._overflowItems = items;\r\n  }\r\n\r\n  /** @private */\r\n  _onClearButtonTouchend(event) {\r\n    // Cancel the following click and focus events\r\n    event.preventDefault();\r\n\r\n    this.clear();\r\n  }\r\n\r\n  /**\r\n   * Override method inherited from `InputControlMixin` and clear items.\r\n   * @protected\r\n   * @override\r\n   */\r\n  _onClearButtonClick(event) {\r\n    event.stopPropagation();\r\n\r\n    this.clear();\r\n  }\r\n\r\n  /**\r\n   * Override an event listener from `InputControlMixin` to\r\n   * stop the change event re-targeted from the input.\r\n   *\r\n   * @param {!Event} event\r\n   * @protected\r\n   * @override\r\n   */\r\n  _onChange(event) {\r\n    event.stopPropagation();\r\n  }\r\n\r\n  /**\r\n   * Override an event listener from `KeyboardMixin`.\r\n   * Do not call `super` in order to override clear\r\n   * button logic defined in `InputControlMixin`.\r\n   *\r\n   * @param {!KeyboardEvent} event\r\n   * @protected\r\n   * @override\r\n   */\r\n  _onEscape(event) {\r\n    if (this.clearButtonVisible && this.selectedItems && this.selectedItems.length) {\r\n      event.stopPropagation();\r\n      this.selectedItems = [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Override an event listener from `KeyboardMixin`.\r\n   * @param {KeyboardEvent} event\r\n   * @protected\r\n   * @override\r\n   */\r\n  _onKeyDown(event) {\r\n    super._onKeyDown(event);\r\n\r\n    const chips = Array.from(this._chips).slice(1);\r\n\r\n    if (!this.readonly && chips.length > 0) {\r\n      switch (event.key) {\r\n        case 'Backspace':\r\n          this._onBackSpace(chips);\r\n          break;\r\n        case 'ArrowLeft':\r\n          this._onArrowLeft(chips);\r\n          break;\r\n        case 'ArrowRight':\r\n          this._onArrowRight(chips);\r\n          break;\r\n        default:\r\n          this._focusedChipIndex = -1;\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _onArrowLeft(chips) {\r\n    if (this.inputElement.value !== '' || this.opened) {\r\n      return;\r\n    }\r\n\r\n    const idx = this._focusedChipIndex;\r\n    let newIdx;\r\n\r\n    if (this.getAttribute('dir') !== 'rtl') {\r\n      if (idx === -1) {\r\n        // Focus last chip\r\n        newIdx = chips.length - 1;\r\n      } else if (idx > 0) {\r\n        // Focus prev chip\r\n        newIdx = idx - 1;\r\n      }\r\n    } else if (idx === chips.length - 1) {\r\n      // Blur last chip\r\n      newIdx = -1;\r\n    } else if (idx > -1) {\r\n      // Focus next chip\r\n      newIdx = idx + 1;\r\n    }\r\n\r\n    if (newIdx !== undefined) {\r\n      this._focusedChipIndex = newIdx;\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _onArrowRight(chips) {\r\n    if (this.inputElement.value !== '' || this.opened) {\r\n      return;\r\n    }\r\n\r\n    const idx = this._focusedChipIndex;\r\n    let newIdx;\r\n\r\n    if (this.getAttribute('dir') === 'rtl') {\r\n      if (idx === -1) {\r\n        // Focus last chip\r\n        newIdx = chips.length - 1;\r\n      } else if (idx > 0) {\r\n        // Focus prev chip\r\n        newIdx = idx - 1;\r\n      }\r\n    } else if (idx === chips.length - 1) {\r\n      // Blur last chip\r\n      newIdx = -1;\r\n    } else if (idx > -1) {\r\n      // Focus next chip\r\n      newIdx = idx + 1;\r\n    }\r\n\r\n    if (newIdx !== undefined) {\r\n      this._focusedChipIndex = newIdx;\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _onBackSpace(chips) {\r\n    if (this.inputElement.value !== '' || this.opened) {\r\n      return;\r\n    }\r\n\r\n    const idx = this._focusedChipIndex;\r\n    if (idx === -1) {\r\n      this._focusedChipIndex = chips.length - 1;\r\n    } else {\r\n      this.__removeItem(chips[idx].item);\r\n      this._focusedChipIndex = -1;\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _focusedChipIndexChanged(focusedIndex, oldFocusedIndex) {\r\n    if (focusedIndex > -1 || oldFocusedIndex > -1) {\r\n      const chips = Array.from(this._chips).slice(1);\r\n      chips.forEach((chip, index) => {\r\n        chip.toggleAttribute('focused', index === focusedIndex);\r\n      });\r\n\r\n      // Announce focused chip\r\n      if (focusedIndex > -1) {\r\n        const item = chips[focusedIndex].item;\r\n        const itemLabel = this._getItemLabel(item);\r\n        announce(`${itemLabel} ${this.i18n.focused}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _onComboBoxChange() {\r\n    const item = this.$.comboBox.selectedItem;\r\n    if (item) {\r\n      this.__selectItem(item);\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _onComboBoxItemSelected(event) {\r\n    this.__selectItem(event.detail.item);\r\n  }\r\n\r\n  /** @private */\r\n  _onCustomValueSet(event) {\r\n    // Do not set combo-box value\r\n    event.preventDefault();\r\n\r\n    // Stop the original event\r\n    event.stopPropagation();\r\n\r\n    this.__clearFilter();\r\n\r\n    this.dispatchEvent(\r\n      new CustomEvent('custom-value-set', {\r\n        detail: event.detail,\r\n        composed: true,\r\n        bubbles: true,\r\n      }),\r\n    );\r\n  }\r\n\r\n  /** @private */\r\n  _onItemRemoved(event) {\r\n    this.__removeItem(event.detail.item);\r\n  }\r\n\r\n  /** @private */\r\n  _preventBlur(event) {\r\n    // Prevent mousedown event to keep the input focused\r\n    // and keep the overlay opened when clicking a chip.\r\n    event.preventDefault();\r\n  }\r\n\r\n  /** @private */\r\n  __computeEffectiveItems(items, selectedItems, readonly) {\r\n    return items && readonly ? selectedItems : items;\r\n  }\r\n\r\n  /** @private */\r\n  __computeEffectiveFilteredItems(items, filteredItems, selectedItems, readonly) {\r\n    return !items && readonly ? selectedItems : filteredItems;\r\n  }\r\n\r\n  /**\r\n   * Override a method from `InputMixin` to\r\n   * compute the presence of value based on `selectedItems`.\r\n   *\r\n   * @protected\r\n   * @override\r\n   */\r\n  get _hasValue() {\r\n    return this.selectedItems && this.selectedItems.length > 0;\r\n  }\r\n}\r\n\r\ncustomElements.define(MultiSelectComboBox.is, MultiSelectComboBox);\r\n\r\nexport { MultiSelectComboBox };\r\n"],
  "mappings": "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",
  "names": ["css", "registerStyles", "css", "registerStyles", "css", "registerStyles", "html", "PolymerElement", "ComboBoxPlaceholder", "ThemableMixin", "html", "PolymerElement", "inputFieldShared", "css", "registerStyles", "ThemableMixin", "multiSelectComboBox", "chip"]
}
